{"version":3,"sources":["serviceWorker.js","components/TodoItem/TodoItem.js","containers/TodoList/TodoList.js","components/WelcomeText/WelcomeText.js","components/InputBox/InputBox.js","containers/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","TodoItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDelete","event","deleteItem","text","handleChange","onValueChange","id","bind","assertThisInitialized","react_default","a","createElement","className","type","defaultChecked","isChecked","onChange","onClick","Component","TodoList","list","todos","map","todo","components_TodoItem_TodoItem","key","value","onToggle","WelcomeText","uuidv1","require","InputBox","_Component","setState","input","target","createTodo","state","inherits","createClass","App","addTodo","toggleTodo","name","concat","toConsumableArray","filter","t","rest","newTodos","untickedTodos","tickedTodos","components_WelcomeText_WelcomeText","InputBox_InputBox","TodoList_TodoList","ReactDOM","render","containers_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e209fd1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. TodoItem is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n\r\n    }\r\n\r\n    handleDelete = event => {\r\n        this.props.deleteItem(this.props.text);\r\n    };\r\n\r\n    handleChange = event => {\r\n        const {onValueChange} = this.props;\r\n        onValueChange(this.props.id);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <li className={\"todoItem\"}>\r\n                <p>{this.props.text}</p>\r\n                <div className={\"checkAndDelete\"}>\r\n                    <input className={\"checkBox\"} type=\"checkbox\" defaultChecked={this.props.isChecked} onChange={this.handleChange}/>\r\n                    <button className={\"deleteButton\"} type={\"button\"} onClick={this.handleDelete}>Delete</button>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from \"../../components/TodoItem/TodoItem\";\r\nimport './Todolist.css'\r\n\r\nfunction TodoList(props) {\r\n    const list = props.todos.map(todo => <TodoItem id={todo.id} key={todo.id} text={todo.value}\r\n                                                onValueChange={props.onToggle} isChecked={todo.isChecked}/>);\r\n    return (\r\n        <div className={\"TodoList\"}>\r\n            <ul>\r\n                {list}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './WelcomeText.css'\r\n\r\nfunction WelcomeText() {\r\n    return (\r\n        <div className={\"welcome\"}>\r\n            <h1>Welcome to this TodoApp!</h1>\r\n            <h4>This TodoApp is made by Mikkel Lundberg</h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WelcomeText;\r\n","import React, {Component} from 'react';\r\nimport * as PropTypes from \"prop-types\";\r\nconst uuidv1 = require('uuid/v1');\r\n\r\nexport class InputBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input: []\r\n        };\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({input: event.target.value});\r\n    };\r\n\r\n    createTodo = () => {\r\n        const {onClick} = this.props;\r\n        onClick({\"id\": uuidv1(), value: this.state.input, isChecked: false})\r\n    };\r\n\r\n    render() {\r\n        return <div className={\"todoMakers\"}>\r\n            <h2>Create a Todo here!</h2>\r\n            <button className={\"createButton\"} type={\"button\"} onClick={this.createTodo}>Create</button>\r\n            <input className={\"textFelt\"} type=\"text\" onChange={this.handleChange}/>\r\n        </div>;\r\n    }\r\n}\r\n\r\nInputBox.propTypes = {\r\n    onClick: PropTypes.func,\r\n    onChange: PropTypes.func\r\n};\r\n","import React, {Component} from 'react';\r\nimport TodoList from \"../TodoList/TodoList\";\r\nimport './App.css';\r\nimport WelcomeText from \"../../components/WelcomeText/WelcomeText\";\r\nimport {InputBox} from \"../../components/InputBox/InputBox\";\r\n\r\nclass App extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        };\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.addTodo = this.addTodo.bind(this);\r\n        this.toggleTodo = this.toggleTodo.bind(this);\r\n    }\r\n\r\n\r\n    deleteItem(name) {\r\n\r\n    }\r\n\r\n    addTodo(todo) {\r\n        const {todos} = this.state;\r\n        const list = [...todos, todo];\r\n        this.setState({todos: list});\r\n    }\r\n\r\n    toggleTodo(id) {\r\n        const {todos} = this.state;\r\n        const todo = todos.filter((t) => t.id === id)[0];\r\n        todo.isChecked = !todo.isChecked;\r\n        const rest = todos.filter((t) => t.id !== id);\r\n        const newTodos = [...rest, todo];\r\n        this.setState({todos: newTodos});\r\n    }\r\n\r\n    render() {\r\n        const {todos} = this.state;\r\n        const untickedTodos = todos.filter((todo) => !todo.isChecked);\r\n        const tickedTodos = todos.filter((todo) => todo.isChecked);\r\n        return (\r\n            <div className={\"app\"}>\r\n                <WelcomeText/>\r\n                <InputBox onClick={this.addTodo}/>\r\n                <div className={\"todoContainer\"}>\r\n                    <TodoList key={\"untickedTodos\"} todos={untickedTodos} deleteItem={this.deleteItem()}\r\n                              onToggle={this.toggleTodo}/>\r\n                    <TodoList key={\"tickedTodos\"} todos={tickedTodos} deleteItem={this.deleteItem()}\r\n                              onToggle={this.toggleTodo}/>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./containers/App/App\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
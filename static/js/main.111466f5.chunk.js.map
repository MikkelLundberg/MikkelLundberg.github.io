{"version":3,"sources":["serviceWorker.js","components/TodoItem/TodoItem.js","containers/TodoList/TodoList.js","containers/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","TodoItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isChecked","handleChange","bind","assertThisInitialized","handleDelete","event","deleteItem","text","setState","react_default","a","createElement","className","type","value","onChange","onClick","Component","TodoList","todos","addTodo","target","_this$state","list","concat","toConsumableArray","name","filter","todo","_this2","map","components_TodoItem_TodoItem","key","App","containers_TodoList_TodoList","ReactDOM","render","containers_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.111466f5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. TodoItem is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.state = {\r\n            isChecked: false\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n\r\n    }\r\n\r\n    handleDelete(event) {\r\n        this.props.deleteItem(this.props.text);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({isChecked: !this.state.isChecked});\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <li className={\"todoItem\"}>\r\n                <p>{this.props.text}</p>\r\n                <div className={\"checkAndDelete\"}>\r\n                    <input className={\"checkBox\"} type=\"checkbox\" value={this.state.isChecked}\r\n                           onChange={this.handleChange}/>\r\n                    <button className={\"deleteButton\"} type={\"button\"} onClick={this.handleDelete}>Delete</button>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, {Component} from 'react';\r\nimport TodoItem from \"../../components/TodoItem/TodoItem\";\r\nimport './Todolist.css'\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: [],\r\n            text: \"\"\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addTodo = this.addTodo.bind(this)\r\n        this.deleteItem = this.deleteItem.bind(this)\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({text: event.target.value});\r\n    }\r\n\r\n\r\n    addTodo() {\r\n        const {todos, text} = this.state;\r\n        const list = [...todos, text];\r\n        this.setState({todos: list});\r\n    }\r\n\r\n    deleteItem(name) {\r\n        const {todos} = this.state;\r\n        const list = todos.filter((todo) => !(todo === name));\r\n        this.setState({todos: list});\r\n    }\r\n\r\n    render() {\r\n\r\n        const list = this.state.todos.map(todo => <TodoItem key={todo} text={todo} deleteItem={this.deleteItem}/>);\r\n\r\n        return (\r\n            <div>\r\n                <h1>Welcome to this TodoApp!</h1>\r\n                <h4>This TodoApp is made by Mikkel Lundberg</h4>\r\n                <div className={\"todoMakers\"}>\r\n                    <button type={\"button\"} onClick={this.addTodo}>Create</button>\r\n                    <input className={\"textFelt\"} type=\"text\" onChange={this.handleChange}/>\r\n                </div>\r\n                <ul>\r\n                    {list}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, {Component} from 'react';\r\nimport TodoList from \"../TodoList/TodoList\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.state = {\r\n            isChecked:false\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({isChecked: !this.state.isChecked});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"app\"}>\r\n\r\n                <TodoList/>\r\n\r\n            </div>\r\n\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./containers/App/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}